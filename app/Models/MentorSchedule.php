<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Http\Request;
use Redirect, DB,Auth, Cache;
use App\Libraries\InputSanitise;
use App\Models\Mentor;
use App\Models\User;

class MentorSchedule extends Model
{
    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = ['meeting_date','from_time','to_time','mentor_id','user_id','comment','type','generated_by'];

    /**
     * type
     1 - fixed meeting
     2 - proposed meeting
     3 - student request
     generated by
     0 - student
     1 - mentor
     */

    /**
     *  add
     */
    protected static function addMentorSchedule(Request $request){
        $date = $request->get('date');
        $fromTime = $request->get('from_time');
        $toTime = $request->get('to_time');
        $comment = $request->get('comment');
        $type = $request->get('type');
        $userId = $request->get('user_id');

        $shedule = new static;
        $shedule->meeting_date = $date;
        $shedule->from_time = $fromTime;
        $shedule->to_time = $toTime;
        $shedule->comment = $comment;
        if(is_object(Auth::guard('mentor')->user())){
            $shedule->type = $type;
	        $shedule->mentor_id = Auth::guard('mentor')->user()->id;
	        $shedule->user_id = $userId;
	        $shedule->generated_by = 1;
        } else {
            $shedule->type = 3;
            $shedule->mentor_id = $request->get('mentor');
            $shedule->user_id = Auth::user()->id;
            $shedule->generated_by = 0;
        }
        $shedule->save();
        return $shedule;
    }

    protected static function getSchedulesByMentorId($mentorId){
    	return static::join('users','users.id','=','mentor_schedules.user_id')
    			->where('mentor_schedules.mentor_id', $mentorId)
    			->select('mentor_schedules.*','users.name as user','users.email as email','users.phone as mobile')->get();
    }

    protected static function getSchedulesByUserId($userId){
        return static::join('mentors','mentors.id','=','mentor_schedules.mentor_id')
                ->where('mentor_schedules.user_id', $userId)
                ->select('mentor_schedules.*','mentors.name as mentor')->get();
    }

    protected static function changeMeetingTypeById(Request $request){
    	$id = $request->get('id');
    	$type = $request->get('type');
    	$schedule = static::find($id);
    	if(is_object($schedule)){
            if(4 == $type){
                $schedule->delete();
                return 'true';
            } else {
        		$schedule->type = $type;
        		$schedule->save();
        		return 'true';
            }
    	}
    	return;
    }

    public function getUser($userId){
        return Cache::remember('vchip:user-'.$userId,10, function() use($userId){
            return User::find($userId);
        });
    }

    public function getMentor($mentorId){
        return Cache::remember('vchip:mentor-'.$mentorId,10, function() use($mentorId){
            return Mentor::find($mentorId);
        });
    }

    protected static function deleteMentoSchedulesByUserId($userId){
        $senderResult = static::where('user_id', $userId)->where('generated_by', 0)->get();
        if(is_object($senderResult) && false == $senderResult->isEmpty()){
            foreach($senderResult as $message){
                $message->delete();
            }
        }
        return;
    }

    protected static function deleteMentorSchedulesByMentorId($mentorId){
        $senderResult = static::where('mentor_id', $mentorId)->where('generated_by', 1)->get();
        if(is_object($senderResult) && false == $senderResult->isEmpty()){
            foreach($senderResult as $message){
                $message->delete();
            }
        }
        return;
    }
}
